###########################
###UK Event study by decade
###########################

#Reading in the file
library(readxl)
path <- "C:/Users/nfa/Dropbox/Ed/Ed Uni work/EME/Data/Clean Data/Indices/All_indices_cleaned_test.csv"
return.Data <- read.csv(path)

#Cleaning Date and index column
return.Data$Date <-as.Date(return.Data$Date)
return.Data$X <- NULL

#UK data only
keep.Vars <- c('Date',
               "FTSE.ALL.SHARE...PRICE.INDEX",
               "FTSE.100...PRICE.INDEX",
               "FT.30.ORDINARY.SHARE...PRICE.INDEX",
               "MSCI.UK...PRICE.INDEX",
               "UK...TO.US....WMR....EXCHANGE.RATE")
UK.Index.Data <- return.Data[keep.Vars]

# 1980s
UK.1980s <- UK.Index.Data[ UK.Index.Data$Date > as.Date("1979-12-31"), ]
UK.1980s <- UK.1980s[UK.1980s$Date < as.Date("1990-01-01"),]

# 1990s
UK.1990s <- UK.Index.Data[ UK.Index.Data$Date > as.Date("1989-12-31"), ]
UK.1990s <- UK.1990s[ UK.1990s$Date < as.Date('2000-01-01'),]

# 2000s
UK.2000s <- UK.Index.Data[ UK.Index.Data$Date > as.Date("1999-12-31"),]
UK.2000s <- UK.2000s[ UK.2000s$Date < as.Date("2010-01-01"),]

#2010s
UK.2010s <- UK.Index.Data[ UK.Index.Data$Date > as.Date("2009-12-31"),]
UK.2010s <- UK.2010s[ UK.2010s$Date < as.Date("2020-01-01"),]

#Converting to 'zoo' format as required by the eventstudies package
library(zoo)

zoo.1980 <- read.zoo(UK.1980s)
zoo.1990 <- read.zoo(UK.1990s)
zoo.2000 <- read.zoo(UK.2000s)
zoo.2010 <- read.zoo(UK.2010s)

# Now reading in UK events and formatting
path.Terror <- "C:/Users/nfa/Dropbox/Ed/Ed Uni work/EME/Data/Clean Data/Terror/United Kingdom.xls"
UK.Terror.Dataset <- read_excel(path.Terror)
UK.Terror.Dataset$Date <- as.Date(UK.Terror.Dataset$Date)
UK.Terror.Dataset.Subset <- subset(UK.Terror.Dataset, select = c(Date,
                                                                 nkill,
                                                                 nwound,
                                                                 propvalue,
                                                                 incident))
# Creating a terror intensity index to pick the largest events for now
library(dplyr)

# First creating a weighting for property damage which varies with damage intensity identical to the Global Terrorism Index
# methodology

UK.Terror.Dataset.Subset <- mutate(UK.Terror.Dataset.Subset, prop.weight = ifelse(propvalue == 0,
                                                      0,
                                               ifelse(propvalue < 1*10^6,
                                                      1,
                                               ifelse(propvalue < 1*10^9,
                                                      2,
                                               ifelse(propvalue > 1*10^9,
                                                      3, 0)))))
# The weights used by the GTI
fatality.weight <- 3
incident.weight <- 1
injury.weight <- 0.5

# Now creating an intensity column
UK.Terror.Dataset.Subset <- mutate(UK.Terror.Dataset.Subset,
                                   Terror.Intensity = incident*incident.weight +
                                                      nwound*injury.weight +
                                                      nkill*fatality.weight +
                                                      prop.weight)


decade.Event.Filter <- function(data, start.Date, end.Date, n.events){
  myData <- data[ data$Date < as.Date(end.Date), ]
  myData <- myData[ myData$Date > as.Date(start.Date),]
  
  to.return <- myData[order( - myData$Terror.Intensity),]
  to.return <- to.return[1:n.events, ]
  return(to.return)
  
}
events.80s <- decade.Event.Filter(UK.Terror.Dataset.Subset,
                                  start.Date = '1979-12-31',
                                  end.Date =  '1990-01-01',
                                  n.events = 5)

events.80s.df <- events.80s[, 'Date']
name_list <- c( "FTSE.100...PRICE.INDEX",
                "FTSE.ALL.SHARE...PRICE.INDEX",
               "FT.30.ORDINARY.SHARE...PRICE.INDEX",
               "MSCI.UK...PRICE.INDEX",
               "UK...TO.US....WMR....EXCHANGE.RATE")
events.80s.df$name <- name_list
colnames(events.80s.df) <- c('when', 'name')

events.80s.df <- data.frame(events.80s.df)

library(eventstudies)


TerrorIndiceCAR <- lapply(1: ncol(zoo.1980), function(x){
  # 10-day window around the event
  event <- phys2eventtime(na.omit(zoo.1980[ , x,
                                                       drop = FALSE]),
                          events.80s.df,
                          10)
  # Estimate ARs
  esMean <- constantMeanReturn(event$z.e[which(attributes(event$z.e)$index
                                               %in% -30:-11), ],
                               residual = FALSE)
  ar <- event$z.e - esMean
  ar <- window(ar, start = 0, end = 10)
  # CAR
  car <- remap.cumsum(ar, base = as.numeric(ar[1, 1]))
  names(car) <- colnames(zoo.1980[ , x,
                                              drop = FALSE])
  
  
  return(car)
})
names(TerrorIndiceCAR) <- colnames(zoo.1980)
# Compile for all indices
TerrorIndiceCAR <- do.call(cbind, TerrorIndiceCAR)
# 11-day CAR
TerrorIndiceCAR[11, ]



TerrorIndiceCARInference <- lapply(1: ncol(zoo.1980), function(x){
  # 10-day window around the event
  event <- phys2eventtime(na.omit(zoo.1980[ , x,
                                            drop = FALSE]),
                          events.80s.df,
                          10)
  es.w <- window(event$z.e,
                 start = -5,
                 end = +5)
  event.time <- remap.cumsum(es.w, is.pc = FALSE, base = 0)
  
#  test <- inference.classic(es.w = event.time,
 #                           to.plot = TRUE)
  
  return(event.time)
})
#TerrorIndiceCARInference


data(StockPriceReturns)
data(SplitDates)
es.results <- phys2eventtime(z = StockPriceReturns,
                             events = SplitDates,
                             width = 5)
es.w <- window(es.results$z.e,
               start = -5,
               end = +5)
eventtime <- remap.cumsum(es.w, is.pc = FALSE, base = 0)
inference.classic(es.w = eventtime,
                  to.plot = FALSE)